{"version":3,"sources":["firebase.js","SideBarChat.js","StateProvider.js","SideBar.js","Chat.js","reducer.js","Login.js","App.js","serviceWorker.js","index.js"],"names":["db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","auth","provider","GoogleAuthProvider","SideBarChat","id","name","addNewChat","useState","seed","setSeed","messages","setMessages","useEffect","Math","floor","random","collection","doc","orderBy","onSnapshot","snapshot","docs","map","data","onClick","roomName","prompt","add","className","to","Avatar","src","message","StateContext","createContext","StateProvider","reducer","initialState","children","Provider","value","useReducer","useStateValue","useContext","SideBar","rooms","setRooms","user","photoURL","IconButton","placeholder","type","key","Chat","input","setInput","roomId","useParams","setRoomName","Date","length","timestamp","toDate","toUTCString","displayName","action","onChange","e","target","preventDefault","console","log","FieldValue","serverTimestamp","actionTypes","state","Login","dispatch","alt","Button","signInWithPopup","then","result","catch","error","alert","App","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0305dc47.chunk.js","sourcesContent":["import firebase from \"firebase\";\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyDy_NW0S8zXJWzN-PkigjELo11FC-RbWkg\",\r\n  authDomain: \"whatsapp-clone-35500.firebaseapp.com\",\r\n  databaseURL: \"https://whatsapp-clone-35500.firebaseio.com\",\r\n  projectId: \"whatsapp-clone-35500\",\r\n  storageBucket: \"whatsapp-clone-35500.appspot.com\",\r\n  messagingSenderId: \"343849200804\",\r\n  appId: \"1:343849200804:web:9a14391ebf7b1be3b3ca31\",\r\n  measurementId: \"G-3XX3RH6P5D\",\r\n};\r\n\r\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\r\nconst db = firebaseApp.firestore();\r\nconst auth = firebase.auth();\r\nconst provider = new firebase.auth.GoogleAuthProvider();\r\n\r\nexport { auth, provider };\r\nexport default db;\r\n","import { Avatar } from \"@material-ui/core\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport db from \"./firebase\";\r\nimport \"./SideBarChat.css\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction SideBarChat({ id, name, addNewChat }) {\r\n  const [seed, setSeed] = useState(\"\");\r\n\r\n  const [messages, setMessages] = useState(\"\");\r\n  useEffect(() => {\r\n    setSeed(Math.floor(Math.random() * 5000));\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (id) {\r\n      db.collection(\"rooms\")\r\n        .doc(id)\r\n        .collection(\"messages\")\r\n        .orderBy(\"timestamp\", \"desc\")\r\n        .onSnapshot((snapshot) =>\r\n          setMessages(snapshot.docs.map((doc) => doc.data()))\r\n        );\r\n    }\r\n  }, []);\r\n\r\n  const createChat = () => {\r\n    const roomName = prompt(\"Please enter name for chat\");\r\n    if (roomName) {\r\n      //do some db stuff\r\n      db.collection(\"rooms\").add({\r\n        name: roomName,\r\n      });\r\n    }\r\n  };\r\n\r\n  return !addNewChat ? (\r\n    <Link to={`/rooms/${id}`}>\r\n      <div className=\"sidebar__chat\">\r\n        <Avatar src={`https://avatars.dicebear.com/api/human/${seed}.svg`} />\r\n        <div className=\"sidebarChat__info\">\r\n          <h2>{name}</h2>\r\n          <p>{messages[0]?.message}</p>\r\n        </div>\r\n      </div>\r\n    </Link>\r\n  ) : (\r\n    <div onClick={createChat} className=\"sidebar__chat\">\r\n      <h2>Add New chat</h2>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SideBarChat;\r\n","import React, { createContext, useContext, useReducer } from \"react\";\r\n\r\nexport const StateContext = createContext();\r\n\r\nexport const StateProvider = ({ reducer, initialState, children }) => (\r\n  <StateContext.Provider value={useReducer(reducer, initialState)}>\r\n    {children}\r\n  </StateContext.Provider>\r\n);\r\n\r\nexport const useStateValue = () => useContext(StateContext);\r\n","import { Avatar, IconButton } from \"@material-ui/core\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport DonutLargeIcon from \"@material-ui/icons/DonutLarge\";\r\nimport ChatIcon from \"@material-ui/icons/Chat\";\r\nimport MoreVertIcon from \"@material-ui/icons/MoreVert\";\r\nimport SearchOutlinedIcon from \"@material-ui/icons/SearchOutlined\";\r\nimport SideBarChat from \"./SideBarChat\";\r\nimport \"./SideBar.css\";\r\nimport db from \"./firebase\";\r\nimport { useStateValue } from \"./StateProvider\";\r\n\r\nfunction SideBar() {\r\n  const [rooms, setRooms] = useState([]);\r\n  const [{user}, dispatch] = useStateValue();\r\n  useEffect(() => {\r\n    db.collection(\"rooms\").onSnapshot((snapshot) =>\r\n      setRooms(\r\n        snapshot.docs.map((doc) => ({\r\n          id: doc.id,\r\n          data: doc.data(),\r\n        }))\r\n      )\r\n    );\r\n\r\n    // return () => {\r\n    //   unsubscribe();\r\n    // };\r\n  }, []);\r\n  return (\r\n    <div className=\"sidebar\">\r\n      <div className=\"sidebar__header\">\r\n        <Avatar src={user?.photoURL}/>\r\n        <div className=\"sidebar__headerRight\">\r\n          <IconButton>\r\n            <DonutLargeIcon />\r\n          </IconButton>\r\n          <IconButton>\r\n            <ChatIcon />\r\n          </IconButton>\r\n          <IconButton>\r\n            <MoreVertIcon />\r\n          </IconButton>\r\n        </div>\r\n      </div>\r\n      <div className=\"sidebar__search\">\r\n        <div className=\"sidebar_searchContainer\">\r\n          <SearchOutlinedIcon />\r\n          <input placeholder=\"Search or start a new chat\" type=\"text\" />\r\n        </div>\r\n      </div>\r\n      <div className=\"sidebar__chats\">\r\n        <SideBarChat addNewChat />\r\n        {rooms.map((rooms) => (\r\n          <SideBarChat key={rooms.id} id={rooms.id} name={rooms.data.name} />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SideBar;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport AttachFileIcon from \"@material-ui/icons/AttachFile\";\r\nimport InsertEmoticonIcon from \"@material-ui/icons/InsertEmoticon\";\r\nimport MoreVertIcon from \"@material-ui/icons/MoreVert\";\r\nimport SearchOutlinedIcon from \"@material-ui/icons/SearchOutlined\";\r\nimport MicIcon from \"@material-ui/icons/Mic\";\r\nimport \"./Chat.css\";\r\nimport { Avatar, IconButton } from \"@material-ui/core\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport db from \"./firebase\";\r\nimport userEvent from \"@testing-library/user-event\";\r\nimport { useStateValue } from \"./StateProvider\";\r\nimport firebase from \"firebase\";\r\n\r\nfunction Chat() {\r\n  const [seed, setSeed] = useState(\"\");\r\n  const [input, setInput] = useState(\"\");\r\n  const { roomId } = useParams();\r\n  const [roomName, setRoomName] = useState(\"\");\r\n  const [messages, setMessages] = useState([]);\r\n  const [{ user }, dispatch] = useStateValue();\r\n\r\n  useEffect(() => {\r\n    db.collection(\"rooms\")\r\n      .doc(roomId)\r\n      .onSnapshot((snapshot) => setRoomName(snapshot.data().name));\r\n\r\n    db.collection(\"rooms\")\r\n      .doc(roomId)\r\n      .collection(\"messages\")\r\n      .orderBy(\"timestamp\", \"asc\")\r\n      .onSnapshot((snapshot) =>\r\n        setMessages(snapshot.docs.map((doc) => doc.data()))\r\n      );\r\n  }, [roomId]);\r\n\r\n  useEffect(() => {\r\n    setSeed(Math.floor(Math.random() * 5000));\r\n  }, [roomId]);\r\n\r\n  const sendMessage = (e) => {\r\n    e.preventDefault();\r\n    console.log(input);\r\n    db.collection(\"rooms\").doc(roomId).collection(\"messages\").add({\r\n      message: input,\r\n      name: user.displayName,\r\n      timestamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n    });\r\n\r\n    setInput(\"\");\r\n  };\r\n  return (\r\n    <div className=\"chat\">\r\n      <div className=\"chat__header\">\r\n        <Avatar src={`https://avatars.dicebear.com/api/human/${seed}.svg`} />\r\n        <div className=\"chat__headerInfo\">\r\n          <h3>{roomName}</h3>\r\n          <p>\r\n            Last activity at..\r\n            {new Date(\r\n              messages[messages.length - 1]?.timestamp?.toDate()\r\n            ).toUTCString()}\r\n          </p>\r\n        </div>\r\n        <div className=\"chat__headerRight\">\r\n          <IconButton>\r\n            <SearchOutlinedIcon />\r\n          </IconButton>\r\n          <IconButton>\r\n            <AttachFileIcon />\r\n          </IconButton>\r\n          <IconButton>\r\n            <MoreVertIcon />\r\n          </IconButton>\r\n        </div>\r\n      </div>\r\n      <div className=\"chat__body\">\r\n        {messages.map((message) => (\r\n          <div\r\n            className={`chat__message ${\r\n              message.name == user.displayName && \"chat__receiver\"\r\n            }`}\r\n          >\r\n            <span className=\"chat__name\">{message.name}</span>\r\n            <div className=\"chat__messageBody\">\r\n              <span className=\"message\">{message.message}</span>\r\n              <span className=\"chat__timestamp\">\r\n                {new Date(message.timestamp?.toDate()).toUTCString()}\r\n              </span>\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n      <div className=\"chat__footer\">\r\n        <InsertEmoticonIcon />\r\n        <form action=\"submit\">\r\n          <input\r\n            value={input}\r\n            type=\"text\"\r\n            placeholder=\"Type a message\"\r\n            onChange={(e) => setInput(e.target.value)}\r\n          />\r\n          <button onClick={sendMessage} type=\"submit\">\r\n            Submit\r\n          </button>\r\n        </form>\r\n        <MicIcon />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Chat;\r\n","export const initialState ={\r\n    user:null\r\n}\r\n\r\nexport const actionTypes ={\r\n    SET_USER:\"SET_USER\"\r\n}\r\n\r\nconst reducer = (state, action) => {\r\n    //console.log(action);\r\n    switch(action.type){\r\n        case actionTypes.SET_USER:\r\n            return {\r\n                ...state,\r\n                user:action.user\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n    \r\n};\r\n\r\nexport default reducer;","import { Button } from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport { auth, provider } from \"./firebase\";\r\nimport \"./Login.css\";\r\nimport { actionTypes } from \"./reducer\";\r\nimport { useStateValue } from \"./StateProvider\";\r\nfunction Login() {\r\n  const [{}, dispatch] = useStateValue();\r\n\r\n  const signIn = () => {\r\n    auth\r\n      .signInWithPopup(provider)\r\n      .then((result) =>\r\n        dispatch({\r\n          type: actionTypes.SET_USER,\r\n          user: result.user,\r\n        })\r\n      )\r\n      .catch((error) => alert(error.message));\r\n  };\r\n  return (\r\n    <div className=\"login\">\r\n      <div className=\"login__container\">\r\n        <img\r\n          src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/6/6b/WhatsApp.svg/225px-WhatsApp.svg.png\"\r\n          alt=\"whatsapp\"\r\n        />\r\n\r\n        <div className=\"login__text\">\r\n          <h1>Sign in to WhatsApp</h1>\r\n        </div>\r\n        <Button type=\"submit\" onClick={signIn}>\r\n          Sign In With Google\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Login;\r\n","import React, { useState } from \"react\";\r\nimport \"./App.css\";\r\nimport SideBar from \"./SideBar\";\r\nimport Chat from \"./Chat\";\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\nimport Login from \"./Login\";\r\nimport { useStateValue } from \"./StateProvider\";\r\n\r\nfunction App() {\r\n  const [{user}, dispatch] = useStateValue(); \r\n  return (\r\n    <div className=\"app\">\r\n      {!user ? (\r\n        <Login/>\r\n      ) : (\r\n        <div className=\"app__body\">\r\n          <Router>\r\n            <SideBar />\r\n            <Switch>\r\n              <Route path=\"/rooms/:roomId\">\r\n                <Chat />\r\n              </Route>\r\n              <Route path=\"/\">\r\n                <div className=\"app__welcome\">\r\n                  <h1>Welcome to Whatsapp Rooms</h1>\r\n                  <h3 className=\"app__welcomeSubText\">Please click on any of the rooms on the left</h3>\r\n                  </div>\r\n              </Route>\r\n            </Switch>\r\n          </Router>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport reducer, { initialState } from \"./reducer\";\nimport { StateProvider } from \"./StateProvider\";\n\nReactDOM.render(\n    <StateProvider initialState={initialState} reducer={reducer}>\n      <App />\n    </StateProvider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}